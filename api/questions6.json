[
  {
    "question": "¿Qué es TypeScript en relación con JavaScript?",
    "options": [
      "Un reemplazo completo de JavaScript",
      "Un superconjunto de JavaScript que añade tipado estático opcional",
      "Una versión compilada de JavaScript",
      "Un framework para JavaScript"
    ],
    "correct": 1,
    "explanation": "TypeScript es un superconjunto de JavaScript desarrollado por Microsoft que añade tipado estático opcional y otras características a JavaScript."
  },
  {
    "question": "¿Qué es la destructuración de arrays en JavaScript?",
    "options": [
      "Un método para eliminar elementos de un array",
      "Una forma de extraer varios valores de un array y asignarlos a variables en una sola operación",
      "Un método para combinar arrays",
      "Una técnica para ordenar arrays"
    ],
    "correct": 1,
    "explanation": "La destructuración de arrays es una expresión de JavaScript que permite extraer múltiples valores de un array y asignarlos a variables individuales en una sola operación."
  },
  {
    "question": "¿Qué es una expresión de función en JavaScript?",
    "options": [
      "Una función declarada usando la palabra clave function",
      "Una función asignada a una variable o constante",
      "Una función que siempre devuelve un valor",
      "Una función que toma otras funciones como argumentos"
    ],
    "correct": 1,
    "explanation": "Una expresión de función es una función que se asigna a una variable o constante, en contraste con una declaración de función que se declara con la palabra clave function al principio."
  },
  {
    "question": "¿Qué es el DOM Virtual (Virtual DOM)?",
    "options": [
      "Una versión simplificada del DOM",
      "Una representación en memoria del DOM que se usa para optimizar las actualizaciones del DOM real",
      "Un DOM que solo existe en servidores virtuales",
      "Una API para manipular el DOM"
    ],
    "correct": 1,
    "explanation": "El DOM Virtual es una representación ligera en memoria del DOM real, utilizada por librerías como React para optimizar las actualizaciones del DOM calculando la forma más eficiente de aplicar cambios."
  },
  {
    "question": "¿Qué es la compatibilidad entre navegadores (browser compatibility) en JavaScript?",
    "options": [
      "La capacidad de un navegador para ejecutar cualquier código JavaScript",
      "La medida en que diferentes navegadores soportan las mismas características de JavaScript",
      "La relación entre JavaScript y HTML en navegadores",
      "Un conjunto de reglas para escribir JavaScript"
    ],
    "correct": 1,
    "explanation": "La compatibilidad entre navegadores se refiere a la medida en que diferentes navegadores soportan las mismas características de JavaScript, lo que puede variar según la versión y el fabricante del navegador."
  },
  {
    "question": "¿Qué es un polyfill en JavaScript?",
    "options": [
      "Un tipo de error",
      "Código que proporciona funcionalidades modernas en navegadores antiguos que no las admiten nativamente",
      "Una técnica de optimización",
      "Una biblioteca externa"
    ],
    "correct": 1,
    "explanation": "Un polyfill es un fragmento de código (generalmente JavaScript) que proporciona funcionalidades modernas en navegadores antiguos que no las soportan nativamente."
  },
  {
    "question": "¿Qué es la declaración 'use strict' en JavaScript?",
    "options": [
      "Una función que valida el código",
      "Una directiva que activa el modo estricto, que impone un conjunto de reglas más rigurosas",
      "Una declaración obsoleta",
      "Un comentario especial"
    ],
    "correct": 1,
    "explanation": "'use strict' es una directiva que activa el modo estricto en JavaScript, imponiendo reglas más rigurosas y eliminando algunas características problemáticas del lenguaje."
  },
  {
    "question": "¿Qué es el patrón de diseño Factory en JavaScript?",
    "options": [
      "Un patrón para crear objetos industriales",
      "Un patrón creacional que proporciona una interfaz para crear objetos sin especificar sus clases concretas",
      "Un patrón para manejar código asíncrono",
      "Un patrón para optimizar el código"
    ],
    "correct": 1,
    "explanation": "El patrón Factory es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, pero permite a las subclases alterar el tipo de objetos que se crearán."
  },
  {
    "question": "¿Qué es el método Object.freeze() en JavaScript?",
    "options": [
      "Un método que congela la ejecución del código",
      "Un método que hace que un objeto sea inmutable",
      "Un método que detiene eventos",
      "Un método que pausa funciones asíncronas"
    ],
    "correct": 1,
    "explanation": "Object.freeze() congela un objeto, impidiendo que se le añadan nuevas propiedades, se eliminen las existentes o se modifiquen sus valores, haciendo el objeto inmutable."
  },
  {
    "question": "¿Qué es el localStorage en JavaScript?",
    "options": [
      "Una variable local",
      "Un mecanismo para almacenar datos en el navegador del usuario de forma persistente",
      "Un método para guardar variables en el ámbito local",
      "Una forma de almacenar datos en el servidor"
    ],
    "correct": 1,
    "explanation": "localStorage es una propiedad que permite almacenar datos en el navegador del usuario de forma persistente, es decir, los datos permanecen incluso después de cerrar el navegador."
  },
  {
    "question": "¿Qué es el sessionStorage en JavaScript?",
    "options": [
      "Una variable de sesión",
      "Un mecanismo similar a localStorage pero los datos solo persisten durante la sesión de la página",
      "Una forma de almacenar datos en el servidor durante una sesión",
      "Una API para gestionar sesiones de usuario"
    ],
    "correct": 1,
    "explanation": "sessionStorage es similar a localStorage, pero los datos almacenados solo están disponibles durante la sesión de la página y se eliminan cuando se cierra la pestaña o ventana."
  },
  {
    "question": "¿Qué es el método Array.from() en JavaScript?",
    "options": [
      "Un método que crea un nuevo array a partir de un array existente",
      "Un método que crea un nuevo array a partir de un objeto iterable o array-like",
      "Un método que convierte un array en un objeto",
      "Un método que genera un array con valores aleatorios"
    ],
    "correct": 1,
    "explanation": "Array.from() crea una nueva instancia de Array a partir de un objeto iterable o array-like, permitiendo crear arrays a partir de strings, maps, sets, etc."
  },
  {
    "question": "¿Qué es una promesa rechazada (rejected promise) en JavaScript?",
    "options": [
      "Una promesa que nunca se resuelve",
      "Una promesa que ha fallado y se ha llamado a su función de rechazo",
      "Una promesa que está en proceso",
      "Una promesa que no fue creada correctamente"
    ],
    "correct": 1,
    "explanation": "Una promesa rechazada es una promesa que ha fallado y se ha llamado a su función de rechazo (reject), indicando que la operación asíncrona no se completó exitosamente."
  },
  {
    "question": "¿Qué es el método Promise.all() en JavaScript?",
    "options": [
      "Un método que espera a que se resuelvan todas las promesas proporcionadas",
      "Un método que crea una nueva promesa",
      "Un método que rechaza todas las promesas",
      "Un método que combina múltiples promesas en una"
    ],
    "correct": 0,
    "explanation": "Promise.all() toma un iterable de promesas y devuelve una nueva promesa que se resuelve cuando todas las promesas del iterable se han resuelto, o se rechaza si alguna de ellas es rechazada."
  },
  {
    "question": "¿Qué es el método Promise.race() en JavaScript?",
    "options": [
      "Un método que determina qué promesa se ejecuta más rápido",
      "Un método que devuelve una promesa que se resuelve o rechaza tan pronto como una de las promesas del iterable se resuelve o rechaza",
      "Un método que ejecuta promesas en paralelo",
      "Un método que combina los resultados de múltiples promesas"
    ],
    "correct": 1,
    "explanation": "Promise.race() devuelve una promesa que se resuelve o rechaza tan pronto como una de las promesas del iterable se resuelve o rechaza, con el valor o razón de esa promesa."
  },
  {
    "question": "¿Qué es un objeto Set en JavaScript?",
    "options": [
      "Un tipo especial de array",
      "Una colección de valores únicos donde cada valor puede aparecer solo una vez",
      "Un objeto que almacena pares clave-valor",
      "Un tipo de variable global"
    ],
    "correct": 1,
    "explanation": "Un Set es una colección de valores únicos, donde cada valor puede aparecer solo una vez. Puede almacenar cualquier tipo de valor, ya sean primitivos o referencias a objetos."
  },
  {
    "question": "¿Qué es un objeto Map en JavaScript?",
    "options": [
      "Una función para transformar arrays",
      "Una colección de pares clave-valor donde las claves pueden ser de cualquier tipo",
      "Un objeto que crea mapas visuales",
      "Un tipo especial de array"
    ],
    "correct": 1,
    "explanation": "Un Map es una colección de pares clave-valor donde, a diferencia de los objetos regulares, las claves pueden ser de cualquier tipo, incluidos objetos y funciones."
  },
  {
    "question": "¿Qué es el método Array.prototype.reduce() en JavaScript?",
    "options": [
      "Un método que reduce el tamaño de un array",
      "Un método que ejecuta una función reductora en cada elemento, resultando en un único valor",
      "Un método que elimina elementos duplicados",
      "Un método que simplifica un array de arrays"
    ],
    "correct": 1,
    "explanation": "reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo un único valor que resulta de la acumulación de todos los elementos."
  },
  {
    "question": "¿Qué es un Web Worker en JavaScript?",
    "options": [
      "Un trabajador que programa en web",
      "Un script que se ejecuta en un hilo en segundo plano, separado del hilo principal del navegador",
      "Una API para trabajar con formularios web",
      "Un tipo de función asíncrona"
    ],
    "correct": 1,
    "explanation": "Un Web Worker es un script que se ejecuta en un hilo de segundo plano, independiente del hilo principal de ejecución de un navegador, permitiendo realizar tareas sin interferir con la interfaz de usuario."
  },
  {
    "question": "¿Qué es el método Object.create() en JavaScript?",
    "options": [
      "Un método que crea una copia exacta de un objeto",
      "Un método que crea un nuevo objeto con el prototipo especificado y propiedades opcionales",
      "Un método que genera un nuevo objeto vacío",
      "Un método que crea un constructor para un objeto"
    ],
    "correct": 1,
    "explanation": "Object.create() crea un nuevo objeto, utilizando un objeto existente como el prototipo del nuevo objeto creado, permitiendo una forma directa de implementar la herencia."
  }
]