[
    {
        "question": "¿Cuál será el resultado del siguiente código JavaScript?<br><br>const users = [<br>  { id: 1, name: 'Alice', age: 25 },<br>  { id: 2, name: 'Bob', age: 30 },<br>  { id: 3, name: 'Charlie', age: 35 },<br>  { id: 4, name: 'David', age: 28 }<br>];<br>const youngUsers = users.filter(user => user.age < 30);<br>console.log(youngUsers.length);",
        "options": [
            "1",
            "2",
            "3",
            "4"
        ],
        "correct": 1,
        "explanation": "El método filter() crea un nuevo array con todos los elementos que pasan la prueba implementada por la función proporcionada. En este caso, la función comprueba si la edad del usuario es menor que 30. Hay dos usuarios que cumplen esta condición: Alice (25) y David (28). Por lo tanto, el resultado será 2."
    },
    {
        "question": "¿Cuál es el propósito principal del middleware en Express.js?",
        "options": [
            "Manejar errores en el servidor",
            "Interceptar solicitudes y realizar operaciones antes de enviar una respuesta",
            "Establecer rutas predeterminadas para solicitudes GET y POST",
            "Conectar la base de datos al servidor"
        ],
        "correct": 1,
        "explanation": "El middleware en Express.js intercepta las solicitudes para realizar operaciones intermedias como autenticación, validación, o registro de solicitudes, antes de enviar la respuesta final."
    },
    {
        "question": "¿Qué método del objeto request en Express.js se utiliza para obtener parámetros de consulta (query params)?",
        "options": [
            "req.params",
            "req.body",
            "req.query",
            "req.get"
        ],
        "correct": 2,
        "explanation": "El objeto req.query contiene los parámetros de consulta enviados en la URL después del signo de interrogación. Por ejemplo, en /api?name=John, req.query.name devolverá 'John'."
    }
]