[
  {
    "question": "¿Qué es JavaScript?",
    "options": [
      "Un lenguaje de programación del lado del servidor",
      "Un lenguaje de programación orientado a objetos y basado en prototipos",
      "Un framework para crear aplicaciones web",
      "Un preprocesador de CSS"
    ],
    "correct": 1,
    "explanation": "JavaScript es un lenguaje de programación orientado a objetos basado en prototipos, interpretado y de alto nivel utilizado principalmente para crear páginas web interactivas."
  },
  {
    "question": "¿Cuál es la forma correcta de declarar una variable en JavaScript moderno?",
    "options": [
      "var nombre = 'valor';",
      "let nombre = 'valor';",
      "const nombre = 'valor';",
      "Las opciones B y C son correctas"
    ],
    "correct": 3,
    "explanation": "En JavaScript moderno, se utilizan 'let' para variables que cambiarán su valor y 'const' para constantes. 'var' es la forma antigua de declarar variables."
  },
  {
    "question": "¿Qué es el DOM en JavaScript?",
    "options": [
      "Un tipo de dato",
      "Una biblioteca externa",
      "Una representación en memoria de la estructura HTML",
      "Un método de encriptación"
    ],
    "correct": 2,
    "explanation": "El DOM (Document Object Model) es una representación en memoria de la estructura HTML que permite a JavaScript acceder y manipular los elementos de la página."
  },
  {
    "question": "¿Cómo se declara una función en JavaScript?",
    "options": [
      "function nombreFuncion() {}",
      "const nombreFuncion = function() {}",
      "const nombreFuncion = () => {}",
      "Todas las anteriores son correctas"
    ],
    "correct": 3,
    "explanation": "En JavaScript, las funciones pueden declararse usando la declaración de función, expresiones de función o funciones flecha (arrow functions)."
  },
  {
    "question": "¿Qué método se utiliza para agregar un elemento al final de un array en JavaScript?",
    "options": [
      "push()",
      "append()",
      "addToEnd()",
      "insert()"
    ],
    "correct": 0,
    "explanation": "El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array."
  },
  {
    "question": "¿Qué es el hoisting en JavaScript?",
    "options": [
      "Una técnica de optimización",
      "El comportamiento que mueve las declaraciones al inicio de su contexto",
      "Un patrón de diseño",
      "Una característica de ES6"
    ],
    "correct": 1,
    "explanation": "Hoisting es un comportamiento de JavaScript donde las declaraciones de variables y funciones son movidas al inicio de su contexto de ejecución durante la fase de compilación."
  },
  {
    "question": "¿Cuál es el operador de igualdad estricta en JavaScript?",
    "options": [
      "==",
      "===",
      "=",
      "!="
    ],
    "correct": 1,
    "explanation": "El operador === compara tanto el valor como el tipo de datos, sin realizar conversiones de tipo."
  },
  {
    "question": "¿Qué es una closure en JavaScript?",
    "options": [
      "Un error en el código",
      "Una función que tiene acceso a variables de su contexto externo",
      "Una variable global",
      "Un tipo de bucle"
    ],
    "correct": 1,
    "explanation": "Una closure es una función que tiene acceso al ámbito léxico en el que fue definida, incluso después de que la función externa haya terminado de ejecutarse."
  },
  {
    "question": "¿Cuál es el resultado de 0.1 + 0.2 en JavaScript?",
    "options": [
      "0.3",
      "0.30000000000000004",
      "0.12",
      "Error"
    ],
    "correct": 1,
    "explanation": "Debido a cómo JavaScript maneja los números de punto flotante, el resultado de 0.1 + 0.2 es 0.30000000000000004, no exactamente 0.3."
  },
  {
    "question": "¿Qué método se utiliza para eliminar el último elemento de un array?",
    "options": [
      "remove()",
      "pop()",
      "delete()",
      "shift()"
    ],
    "correct": 1,
    "explanation": "El método pop() elimina el último elemento de un array y devuelve ese elemento."
  },
  {
    "question": "¿Qué es un callback en JavaScript?",
    "options": [
      "Una función que se pasa como argumento a otra función",
      "Un evento del navegador",
      "Un tipo de variable",
      "Un método de array"
    ],
    "correct": 0,
    "explanation": "Un callback es una función que se pasa como argumento a otra función y se ejecuta después de que ocurra algún evento o se complete alguna operación."
  },
  {
    "question": "¿Qué método se utiliza para convertir un objeto JSON en JavaScript?",
    "options": [
      "JSON.parse()",
      "JSON.stringify()",
      "JSON.convert()",
      "JSON.toObject()"
    ],
    "correct": 0,
    "explanation": "JSON.parse() analiza una cadena de texto como JSON y transforma el valor producido por el análisis a un objeto JavaScript."
  },
  {
    "question": "¿Qué es el objeto 'this' en JavaScript?",
    "options": [
      "Una variable global",
      "Una referencia al elemento HTML actual",
      "Una referencia al contexto de ejecución actual",
      "Un puntero a una función"
    ],
    "correct": 2,
    "explanation": "En JavaScript, 'this' hace referencia al contexto de ejecución actual y su valor depende de cómo se invoca la función."
  },
  {
    "question": "¿Qué son las promesas en JavaScript?",
    "options": [
      "Funciones asíncronas",
      "Objetos que representan la eventual finalización o fallo de una operación asíncrona",
      "Métodos de manipulación del DOM",
      "Variables globales"
    ],
    "correct": 1,
    "explanation": "Las promesas son objetos que representan la eventual finalización (o fallo) de una operación asíncrona y su valor resultante."
  },
  {
    "question": "¿Cuál es la diferencia entre let y const?",
    "options": [
      "No hay diferencia",
      "let permite reasignar el valor, const no",
      "const es para funciones, let para variables",
      "let es global, const es local"
    ],
    "correct": 1,
    "explanation": "Las variables declaradas con let pueden ser reasignadas, mientras que las declaradas con const son constantes y no pueden cambiar su valor después de la asignación inicial."
  },
  {
    "question": "¿Qué es el operador spread (...) en JavaScript?",
    "options": [
      "Un operador de asignación",
      "Un operador que permite expandir elementos iterables",
      "Un operador de comparación",
      "Un operador lógico"
    ],
    "correct": 1,
    "explanation": "El operador spread (...) permite expandir elementos iterables como arrays o strings en lugares donde se esperan cero o más argumentos o elementos."
  },
  {
    "question": "¿Qué es la desestructuración en JavaScript?",
    "options": [
      "Una técnica para eliminar objetos",
      "Una forma de extraer valores de arrays o propiedades de objetos",
      "Un método de encriptación",
      "Un patrón de diseño"
    ],
    "correct": 1,
    "explanation": "La desestructuración es una expresión de JavaScript que permite extraer datos de arrays o objetos en variables individuales de forma más concisa."
  },
  {
    "question": "¿Qué método utilizarías para ejecutar una función después de un cierto tiempo?",
    "options": [
      "setInterval()",
      "setTimeout()",
      "delay()",
      "wait()"
    ],
    "correct": 1,
    "explanation": "setTimeout() establece un temporizador que ejecuta una función o un código específico una vez que expira el temporizador."
  },
  {
    "question": "¿Qué es AJAX en JavaScript?",
    "options": [
      "Un nuevo lenguaje de programación",
      "Una biblioteca de JavaScript",
      "Una técnica para actualizar partes de una página web sin recargarla completamente",
      "Un framework de JavaScript"
    ],
    "correct": 2,
    "explanation": "AJAX (Asynchronous JavaScript and XML) es una técnica que permite actualizar partes de una página web sin necesidad de recargar la página completa."
  },
  {
    "question": "¿Cuál es la función de 'use strict' en JavaScript?",
    "options": [
      "Mejorar el rendimiento",
      "Activar el modo estricto que detecta errores comunes y acciones inseguras",
      "Hacer el código compatible con navegadores antiguos",
      "Permitir el uso de características nuevas"
    ],
    "correct": 1,
    "explanation": "'use strict' activa el modo estricto en JavaScript, que ayuda a detectar errores comunes y previene acciones que podrían llevar a comportamientos inesperados."
  }
]